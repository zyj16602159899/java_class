# !usr/bin/env python

# 多态（python中是“伪多态”）

# 面向对象三大特征：封装/继承/多态
# 封装：将数据和方法放在一个类中就构成了封装
# 继承：python中一个类可以继承于一个类也可以继承多个类，被继承的叫做父类（或基类），继承的类叫做子类
# 多态：指的是一类事物有多种形态，一个抽象类有多个子类（因而多态的概念依赖于继承），不同的子类对象调
# 用相同的方法，产生不同的执行结果，多态可以增加代码的灵活度。

# 实现多态的步骤：
# 1.定义一个父类，实现某个方法
# 2.定义多个子类，在子类中重写父类的方法，每个子类方法实现不同的功能
# 3.假设我们定义了一个函数，需要一个Base类型的对象的函数，那么调用函数的时候，传入Base类不同的子类对象，
# 那么这么函数就会执行不同的功能，这就是多态的体现。

# 多态的意义：开放封闭原则
# 对于一个变量，我们只需要知道它是Base类型，无需确切地知道它的子类型，就可以放心的调用run()方法（调用
# 方只管调用，不管细节）
# 当需要新增功能，只需要新增一个Base类的子类实现run()方法，就可以在原来的基础上进行功能扩展，这就是
# 著名的“开放封闭”原则
# 对扩展开放：允许新增Base子类
# 对修改封闭：不需要修改Base类型的run()等函数

# python中函数的参数是没有类型限制的（字符串/列表/数字/函数/类都可以）,所有多态在python中的体现并不是
# 很严谨。多态的概念是应用于Java和C#这一类强类型语言中，而python崇尚“鸭子类型”

# 鸭子类型概念：它并不要求严格的继承体系，关注的不是对象的类型本身，而是它如何使用的，一个对象只要“看起
# 来像鸭子，走起来像鸭子”，它就可以被看作是鸭子

# 鸭子类型的体现：
# 静态语言：对于静态语言（java/C#）来讲，上面传入的对象必须是Base类型或者它的子类，否则，将无法调用run方法。
# 动态语言：对于动态语言python来讲，上面传入的并不一定是要Base类型，它可以是其他类型，只要在内部实现一个
# run()方法就行了，这就是鸭子类型的体现。


class Base(object):

    def run(self):
        print('---base_run---:走路')


class Cat(Base):

    def run(self):
        print('---cat_run---:爬树')


class Dog(Base):

    def run(self):
        print('---dog_run---:伸舌头')


class Pig(Base):

    pass


b_obj = Base()
c_obj = Cat()
d_obj = Dog()
p_obj = Pig()


# 子类的对象是属于父类的类型
print(isinstance(c_obj, Base))
print(isinstance(c_obj, Cat))


def func(base_obj):     # python中函数的参数是没有类型限制的
    base_obj.run()


func(b_obj)
func(c_obj)
func(d_obj)
func(p_obj)