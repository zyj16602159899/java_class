1.迭代器：
迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问结束。
迭代器只会往前，不会后退。

2.不仅for循环可以接收可迭代对象，list()、tuple()等方法也可以接收。
一个对象如果是迭代器，必然满足2个条件：
(1)有__iter__方法，且return的对象有__next__方法
(2)有__next__方法

3.生成器：
生成器是一种特殊的迭代器。

4.使用了yield关键字的函数不再是函数，而是生成器。
yield关键字有两点作用：
(1)保存当前运行状态（断点），然后暂停执行，即将生成器挂起
(2)将关键字后面表达式的值作为返回值返回，此时可理解为起到了return的作用

5.可以使用next()方法让生成器从断点处继续执行，即唤醒生成器
6.python3中的生成器可以使用return返回最终运行的返回值（python2中的生成器不允许使用return返回一个返回值）

7.除了next()方法，还可以使用send()方法来唤醒执行。使用send()的好处是可以在唤醒的同时向断点处传入一个附加数据。

8.安装greenlet库:pip install greenlet

9.greenlet已经实现了协程，但还需要手动切换，较为麻烦。因此可以引入更强大且可以自动切换任务的模块：gevent
安装gevent库:pip install gevent

10.线程、进程、协程的对比：
(1)进程是资源分配的单位
(2)线程是操作系统调度的单位
(3)进程切换需要的资源最大，效率很低
(4)线程切换需要的资源一般，效率一般（在不考虑GIL的情况下）
(5)协程切换任务需要的资源很小，效率高
(6)多进程、多线程根据cpu核数不一样可能是并行的，但协程是在一个线程中，所以是并发
()
