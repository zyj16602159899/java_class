线程的划分尺度小于进程（资源比进程少），使得多线程程序的并发性高
进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率

线程不能独立执行，必须依存于进程中

线程和进程在使用上各有优缺点：
线程执行开销小，但不利于资源的管理和维护；而进程正相反。

# 进程的状态：
# 工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致有了不同的状态。
# 就绪状态：运行的条件都已经满足了，正在等待cpu执行
# 执行状态：cpu正在执行其功能
# 等待状态：等待某些条件满足，例如一个程序sleep了，此时就处理等待状态

# 进程执行的时候，不加__name__ == '__main__'为什么会报错？(windows系统)
# 原因：无限递归